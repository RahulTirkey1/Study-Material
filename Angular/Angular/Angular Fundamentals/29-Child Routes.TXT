Create two new components which could be used as Child route in department-detail component.
C:\>ng g c departmentOverview -it -is
C:\>ng g c departmentOverview -it -is

app-routing.module.ts,
import { NgModule } from '@angular/core';
import { Routes, RouterModule } from '@angular/router';
import { DepartmentListComponent } from './department-list/department-list.component';
import { EmployeeListComponent } from './employee-list/employee-list.component';

const routes: Routes = [
  { path:'', redirectTo:'/departments', pathMatch:'full},        //It should be rendered by default upon ng serve
  { path: 'departments', component: DepartmentListComponent },
  { path: 'departments/:id', component: DepartmentDetailComponent,
*   children: [
*      { path: 'overview', component: DepartmentOverviewComponent},
*      { path: 'contact', component: DepartmentContactComponent}
    ]
   },
  { path: 'employees',   component: EmployeeListComponent },
  { path:'**',component:PageNotFoundComponent }              //This is a wildcard route and it should be at the last, if any route doesn't match then render it.
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
   export class AppRoutingModule { }
*   export const routingComponents = [DepartmentListComponent, EmployeeListComponent,PageNotFoundComponent,DepartmentDetailComponent,DetailOverviewComponent,DetailContactComponent]

------------------------------------------------

department-list.component.ts,
import { Component, OnInit } from '@angular/core';
import { Router} from '@angular/router';

@Component({
  selector: 'app-department-list',
  template: `
    <h3>
      Department List
    </h3>
    <ul class="items">
      <li *ngFor="let department of departments" [class.selected]="isSelected(department)"  (click)="onSelect(department)">
        <span class="badge">{{department.id}}</span> {{department.name}}
      </li>
  </ul>
  `,
  styles: []
})
export class DepartmentListComponent implements OnInit {
  public selectedId;
  departments = [
    {"id": 1, "name": "Angular"},
    {"id": 2, "name": "Node"},
    {"id": 3, "name": "MongoDB"},
    {"id": 4, "name": "Ruby"},
    {"id": 5, "name": "Bootstrap"}
  ]
  constructor(private router: Router) { }

  ngOnInit() {
   this.route.paramMap.subscribe((params: ParamMap) => {
      let id = parseInt(params.get('id'));
      this.selectedId = id;

    } );
  }

  onSelect(department) {
            this.router.navigate([department.id], { relativeTo: this.route });     //navigates to the same route irrespective of name change in between

  }
}

isSelected(department) { return department.id === this.selectedId; }
------------------------------------------------
department-detail.component.ts,
import { Component, OnInit } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
@Component({
  selector: 'app-department-detail',
  template: `
    <h3>You selected department with id = {{departmentId}}</h3>
    <p>
*      <button (click)="showOverview()">Overview</button>
*      <button (click)="showContact()">Contact</button>
    </p>
    
    <router-outlet></router-outlet>
    <p>
*      <button (click)="goPrevious()">Previous</button>
*      <button (click)="goNext()">Next</button>
    </p>
     <div>
      <button (click)="gotoDepartments()">Back</button>
    </div>
  `,
  styles: []
})
export class DepartmentDetailComponent implements OnInit {

  public departmentId;
  constructor(private route: ActivatedRoute){}

  ngOnInit() {
    //let id = parseInt(this.route.snapshot.paramMap.get('id'));        //Here the route will be changed but the onNit method won't be called again because the same component will be not be re-rendered.
    this.route.paramMap.subscribe((params: ParamMap) => {                
      let id = parseInt(params.get('id'));
      this.departmentId = id;

    } );
  }

  goPrevious(){
    let previousId = this.departmentId - 1;
    this.router.navigate(['/departments', previousId]);
  }
  goNext(){
   let nextId = this.departmentId + 1;    
   this.router.navigate(['/departments', nextId]);
  }
   gotoDepartments() {
    let selectedId = this.departmentId ? this.departmentId : null;
    this.router.navigate(['../', { id: selectedId }], { relativeTo: this.route });

   }

*    showOverview(){
*    this.router.navigate(['overview'], { relativeTo: this.route });
  }

*  showContact(){
*    this.router.navigate(['contact'], { relativeTo: this.route });
  }
}