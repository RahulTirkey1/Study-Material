A class component that implements either one or both of the lifecycle methods getDerivedStateFromError or componentDidCatch becomes an error boundary.

The static method getDerivedStateFromError method is used to render a fallback UI after an error is thrown and the componentDidCatch method is used to log the error information.

Error boundaries are React components that catch Javascript error in their child component tree,those errors, and display a fall-back UI.

In app.js,
class App extends Component {
	render() {
		return (
			<div className="App">
                         <ErrorBoundary>
                            <Hero heroName="Batman" />
                         </ErrorBoundary>
                         <ErrorBoundary>
			     <Hero heroName="Superman" />
                         </ErrorBoundary>
			 <ErrorBoundary>
			      <Hero heroName="Joker" />
			  </ErrorBoundary> 
			</div>
		)
	}
}

export default App;

Hero.js,
import React from 'react'

function Hero ({ heroName }) {
  if (heroName === 'Joker') {
    throw new Error(' Not a hero!')
  }
  return <h1>{heroName}</h1>
}

export default Hero;

ErrorBoundary.js,
import React, { Component } from 'react'

export class ErrorBoundary extends Component {
	constructor(props) {
		super(props)

		this.state = {
			hasError: false
		}
	}

	static getDerivedStateFromError(error) {
		return { hasError: true }
	}

	componentDidCatch(error, info) {
		console.log(error)
		console.log(info)
	}

	render() {
		if (this.state.hasError) {
			return <h1>Something went wrong.</h1>
		}
		return this.props.children
	}
}

export default ErrorBoundary;
